version: 2.1
orbs:
  elixir: membraneframework/elixir@1

executors:
 machine_executor_amd64:
   machine:
     image: ubuntu-2204:2022.04.2
   environment:
     architecture: "amd64"
     platform: "linux/amd64"

jobs:
  test:
    executor: machine_executor_amd64
    steps:
      - checkout
      - run: docker compose -f docker-compose-test.yml up test --exit-code-from test

  # Job equal to elixir/lint, but without using dialyzer (rtc_engine does not support it)
  lint_wo_dialyzer:
    executor:
      mix_env: dev
      name: elixir/docker_membrane
    steps:
      - checkout
      - run:
          command: mkdir -p priv
          name: Ensure priv dir exists
      - elixir/get_mix_deps
      - elixir/use_build_cache:
          before-save:
            - run: mix compile
          env: dev
          regenerate: true
      - run:
          command: mix format --check-formatted
          name: Check code formatting
      - run:
          command: mix credo
          name: Run Credo linter
      - run:
          command: 'mix docs && mix docs 2>&1 | (! grep -q "warning:")'
          name: Check docs generation for warnings

  # Install dependencies and run linter on front-end, possibly run tests in the future
  lint_frontend:
    working_directory: ~/membrane_live/assets
    docker:
      - image: cimg/node:18.4.0

    steps:
      - checkout:
          path: ~/membrane_live
      - run:
          command: npm install --legacy-peer-deps
          name: Install front-end dependencies
      - run:
          command: npm run format:check
          name: Run prettier on front-end
      - run:
          command: npm run typing:check
          name: Run typescript typechecking on front-end
      - run:
          command: npm run lint:check
          name: Run linter on front-end
          
workflows:
  version: 2
  build:
    jobs:
      - test
      - elixir/build_test
      - lint_wo_dialyzer
      - lint_frontend
